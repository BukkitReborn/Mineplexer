package org.jooq.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import org.jooq.conf.Settings;
import org.jooq.conf.SettingsTools;
import org.jooq.tools.jdbc.DefaultConnection;

class SettingsEnabledConnection
  extends DefaultConnection
{
  private final Settings settings;
  
  SettingsEnabledConnection(Connection delegate, Settings settings)
  {
    super(delegate);
    
    this.settings = settings;
  }
  
  public final PreparedStatement prepareStatement(String sql)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql);
  }
  
  public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql, resultSetType, resultSetConcurrency);
  }
  
  public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }
  
  public final PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql, autoGeneratedKeys);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql, autoGeneratedKeys);
  }
  
  public final PreparedStatement prepareStatement(String sql, int[] columnIndexes)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql, columnIndexes);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql, columnIndexes);
  }
  
  public final PreparedStatement prepareStatement(String sql, String[] columnNames)
    throws SQLException
  {
    if (SettingsTools.executePreparedStatements(this.settings)) {
      return getDelegate().prepareStatement(sql, columnNames);
    }
    return new SettingsEnabledPreparedStatement(getDelegate(), sql, columnNames);
  }
}
