package org.jooq.tools.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.jooq.Record;
import org.jooq.Result;

public class MockStatement
  extends JDBC41Statement
  implements CallableStatement
{
  private final MockConnection connection;
  private final MockDataProvider data;
  private final List<String> sql;
  private final List<List<Object>> bindings;
  private final List<Integer> outParameterTypes;
  private MockResult[] result;
  private int resultIndex;
  private boolean resultWasNull;
  private boolean isClosed;
  int resultSetType = 1003;
  int resultSetConcurrency = 1007;
  int resultSetHoldability = 2;
  int autoGeneratedKeys = 2;
  int[] columnIndexes;
  String[] columnNames;
  private int queryTimeout;
  private int maxRows;
  
  public MockStatement(MockConnection connection, MockDataProvider data)
  {
    this(connection, data, null);
  }
  
  public MockStatement(MockConnection connection, MockDataProvider data, String sql)
  {
    this.connection = connection;
    this.data = data;
    this.sql = new ArrayList();
    this.bindings = new ArrayList();
    this.outParameterTypes = new ArrayList();
    if (sql != null) {
      this.sql.add(sql);
    }
    this.bindings.add(new ArrayList());
  }
  
  private List<Object> bindings()
  {
    return (List)this.bindings.get(this.bindings.size() - 1);
  }
  
  private void ensureBindingsCapacity(int index)
  {
    List<Object> b = bindings();
    if (b.size() < index) {
      b.addAll(Collections.nCopies(index - b.size(), null));
    }
  }
  
  private void ensureOutParameterTypesCapacity(int index)
  {
    if (this.outParameterTypes.size() < index) {
      this.outParameterTypes.addAll(Collections.nCopies(index - this.outParameterTypes.size(), (Integer)null));
    }
  }
  
  private void checkNotClosed()
    throws SQLException
  {
    if (this.isClosed) {
      throw new SQLException("Connection is already closed");
    }
  }
  
  public Connection getConnection()
    throws SQLException
  {
    return this.connection;
  }
  
  private boolean execute0(String localSql, int localResultSetType, int localResultSetConcurrency, int localResultSetHoldability, int localAutoGeneratedKeys, int[] localColumnIndexes, String[] localColumnNames)
    throws SQLException
  {
    checkNotClosed();
    
    MockExecuteContext context = new MockExecuteContext(new String[] { localSql }, new Object[][] {bindings().toArray() }, localAutoGeneratedKeys, localColumnIndexes, localColumnNames, unbox(this.outParameterTypes));
    
    this.result = this.data.execute(context);
    return (this.result != null) && (this.result.length > 0) && (this.result[this.resultIndex].data != null);
  }
  
  private static final int[] unbox(List<Integer> list)
  {
    int[] array = new int[list.size()];
    for (int i = 0; i < array.length; i++)
    {
      Integer value = (Integer)list.get(i);
      array[i] = (value == null ? 0 : value.intValue());
    }
    return array;
  }
  
  public ResultSet getGeneratedKeys()
    throws SQLException
  {
    return getResultSet();
  }
  
  public boolean getMoreResults()
    throws SQLException
  {
    return getMoreResults(1);
  }
  
  public boolean getMoreResults(int current)
    throws SQLException
  {
    return (this.result != null) && (++this.resultIndex < this.result.length);
  }
  
  public ResultSet getResultSet()
    throws SQLException
  {
    checkNotClosed();
    return (this.result != null) && (this.resultIndex < this.result.length) && (this.result[this.resultIndex].data != null) ? new MockResultSet(this.result[this.resultIndex].data, this.maxRows) : null;
  }
  
  public int getUpdateCount()
    throws SQLException
  {
    checkNotClosed();
    return (this.result != null) && (this.result.length > 0) ? this.result[this.resultIndex].rows : 0;
  }
  
  public ResultSet executeQuery()
    throws SQLException
  {
    return executeQuery((String)this.sql.get(0));
  }
  
  public ResultSet executeQuery(String localSql)
    throws SQLException
  {
    execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
    return getResultSet();
  }
  
  public boolean execute()
    throws SQLException
  {
    return execute((String)this.sql.get(0));
  }
  
  public boolean execute(String localSql)
    throws SQLException
  {
    return execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
  }
  
  public boolean execute(String localSql, int localAutoGeneratedKeys)
    throws SQLException
  {
    return execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, localAutoGeneratedKeys, null, null);
  }
  
  public boolean execute(String localSql, int[] localColumnIndexes)
    throws SQLException
  {
    return execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, localColumnIndexes, null);
  }
  
  public boolean execute(String localSql, String[] localColumnNames)
    throws SQLException
  {
    return execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, null, localColumnNames);
  }
  
  public int executeUpdate()
    throws SQLException
  {
    return executeUpdate((String)this.sql.get(0));
  }
  
  public int executeUpdate(String localSql)
    throws SQLException
  {
    execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, this.autoGeneratedKeys, this.columnIndexes, this.columnNames);
    return getUpdateCount();
  }
  
  public int executeUpdate(String localSql, int localAutoGeneratedKeys)
    throws SQLException
  {
    execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, localAutoGeneratedKeys, null, null);
    return getUpdateCount();
  }
  
  public int executeUpdate(String localSql, int[] localColumnIndexes)
    throws SQLException
  {
    execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, localColumnIndexes, null);
    return getUpdateCount();
  }
  
  public int executeUpdate(String localSql, String[] localColumnNames)
    throws SQLException
  {
    execute0(localSql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability, 1, null, localColumnNames);
    return getUpdateCount();
  }
  
  public void addBatch()
    throws SQLException
  {
    checkNotClosed();
    this.bindings.add(new ArrayList());
  }
  
  public void addBatch(String localSql)
    throws SQLException
  {
    checkNotClosed();
    this.sql.add(localSql);
  }
  
  public void clearBatch()
    throws SQLException
  {
    checkNotClosed();
    this.sql.clear();
    this.bindings.clear();
    this.bindings.add(new ArrayList());
  }
  
  public int[] executeBatch()
    throws SQLException
  {
    checkNotClosed();
    
    Object[][] matrix = new Object[this.bindings.size() - 1][];
    for (int i = 0; i < this.bindings.size() - 1; i++) {
      matrix[i] = ((List)this.bindings.get(i)).toArray();
    }
    this.result = this.data.execute(new MockExecuteContext((String[])this.sql.toArray(new String[this.sql.size()]), matrix));
    
    int[] rows = new int[this.result.length];
    for (int i = 0; i < this.result.length; i++) {
      rows[i] = this.result[i].rows;
    }
    return rows;
  }
  
  public void clearParameters()
    throws SQLException
  {
    checkNotClosed();
    List<Object> b = bindings();
    for (int i = 0; i < b.size(); i++) {
      b.set(i, null);
    }
  }
  
  public void setNull(int parameterIndex, int sqlType)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, null);
  }
  
  public void setNull(int parameterIndex, int sqlType, String typeName)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, null);
  }
  
  public void setBoolean(int parameterIndex, boolean x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Boolean.valueOf(x));
  }
  
  public void setByte(int parameterIndex, byte x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Byte.valueOf(x));
  }
  
  public void setShort(int parameterIndex, short x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Short.valueOf(x));
  }
  
  public void setInt(int parameterIndex, int x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Integer.valueOf(x));
  }
  
  public void setLong(int parameterIndex, long x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Long.valueOf(x));
  }
  
  public void setFloat(int parameterIndex, float x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Float.valueOf(x));
  }
  
  public void setDouble(int parameterIndex, double x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, Double.valueOf(x));
  }
  
  public void setBigDecimal(int parameterIndex, BigDecimal x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setString(int parameterIndex, String x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setNString(int parameterIndex, String value)
    throws SQLException
  {
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, value);
  }
  
  public void setBytes(int parameterIndex, byte[] x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setDate(int parameterIndex, Date x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setTime(int parameterIndex, Time x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setTimestamp(int parameterIndex, Timestamp x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setObject(int parameterIndex, Object x, int targetSqlType)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setObject(int parameterIndex, Object x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setURL(int parameterIndex, URL x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x);
  }
  
  public void setArray(int parameterIndex, Array x)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    bindings().set(parameterIndex - 1, x.getArray());
  }
  
  private Record outParameters()
    throws SQLException
  {
    if ((this.result == null) || (this.result.length == 0) || (this.result[0].data == null) || (this.result[0].data.size() == 0)) {
      throw new SQLException("No OUT Parameters available");
    }
    return (Record)this.result[0].data.get(0);
  }
  
  private int translate(int parameterIndex)
    throws SQLException
  {
    if (parameterIndex > this.outParameterTypes.size()) {
      throw new SQLException("OUT parameter index too high: " + parameterIndex);
    }
    int index = -1;
    for (int i = 0; i < parameterIndex; i++) {
      if (this.outParameterTypes.get(i) != null) {
        index++;
      }
    }
    return index;
  }
  
  public void registerOutParameter(int parameterIndex, int sqlType)
    throws SQLException
  {
    checkNotClosed();
    ensureBindingsCapacity(parameterIndex);
    ensureOutParameterTypesCapacity(parameterIndex);
    this.outParameterTypes.set(parameterIndex - 1, Integer.valueOf(sqlType));
  }
  
  public void registerOutParameter(int parameterIndex, int sqlType, int scale)
    throws SQLException
  {
    registerOutParameter(parameterIndex, sqlType);
  }
  
  public void registerOutParameter(int parameterIndex, int sqlType, String typeName)
    throws SQLException
  {
    registerOutParameter(parameterIndex, sqlType);
  }
  
  public boolean wasNull()
    throws SQLException
  {
    return this.resultWasNull;
  }
  
  public String getString(int parameterIndex)
    throws SQLException
  {
    String value = (String)outParameters().getValue(translate(parameterIndex), String.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public String getNString(int parameterIndex)
    throws SQLException
  {
    String value = (String)outParameters().getValue(translate(parameterIndex), String.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public boolean getBoolean(int parameterIndex)
    throws SQLException
  {
    Boolean value = (Boolean)outParameters().getValue(translate(parameterIndex), Boolean.class);
    this.resultWasNull = (value == null);
    return value == null ? false : value.booleanValue();
  }
  
  public byte getByte(int parameterIndex)
    throws SQLException
  {
    Byte value = (Byte)outParameters().getValue(translate(parameterIndex), Byte.class);
    this.resultWasNull = (value == null);
    return value == null ? 0 : value.byteValue();
  }
  
  public short getShort(int parameterIndex)
    throws SQLException
  {
    Short value = (Short)outParameters().getValue(translate(parameterIndex), Short.class);
    this.resultWasNull = (value == null);
    return value == null ? 0 : value.shortValue();
  }
  
  public int getInt(int parameterIndex)
    throws SQLException
  {
    Integer value = (Integer)outParameters().getValue(translate(parameterIndex), Integer.class);
    this.resultWasNull = (value == null);
    return value == null ? 0 : value.intValue();
  }
  
  public long getLong(int parameterIndex)
    throws SQLException
  {
    Long value = (Long)outParameters().getValue(translate(parameterIndex), Long.class);
    this.resultWasNull = (value == null);
    return value == null ? 0L : value.longValue();
  }
  
  public float getFloat(int parameterIndex)
    throws SQLException
  {
    Float value = (Float)outParameters().getValue(translate(parameterIndex), Float.class);
    this.resultWasNull = (value == null);
    return value == null ? 0.0F : value.floatValue();
  }
  
  public double getDouble(int parameterIndex)
    throws SQLException
  {
    Double value = (Double)outParameters().getValue(translate(parameterIndex), Double.class);
    this.resultWasNull = (value == null);
    return value == null ? 0.0D : value.doubleValue();
  }
  
  public BigDecimal getBigDecimal(int parameterIndex, int scale)
    throws SQLException
  {
    BigDecimal value = (BigDecimal)outParameters().getValue(translate(parameterIndex), BigDecimal.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public BigDecimal getBigDecimal(int parameterIndex)
    throws SQLException
  {
    BigDecimal value = (BigDecimal)outParameters().getValue(translate(parameterIndex), BigDecimal.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public byte[] getBytes(int parameterIndex)
    throws SQLException
  {
    byte[] value = (byte[])outParameters().getValue(translate(parameterIndex), byte[].class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Date getDate(int parameterIndex)
    throws SQLException
  {
    Date value = (Date)outParameters().getValue(translate(parameterIndex), Date.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Date getDate(int parameterIndex, Calendar cal)
    throws SQLException
  {
    Date value = (Date)outParameters().getValue(translate(parameterIndex), Date.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Time getTime(int parameterIndex)
    throws SQLException
  {
    Time value = (Time)outParameters().getValue(translate(parameterIndex), Time.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Time getTime(int parameterIndex, Calendar cal)
    throws SQLException
  {
    Time value = (Time)outParameters().getValue(translate(parameterIndex), Time.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Timestamp getTimestamp(int parameterIndex)
    throws SQLException
  {
    Timestamp value = (Timestamp)outParameters().getValue(translate(parameterIndex), Timestamp.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Timestamp getTimestamp(int parameterIndex, Calendar cal)
    throws SQLException
  {
    Timestamp value = (Timestamp)outParameters().getValue(translate(parameterIndex), Timestamp.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Object getObject(int parameterIndex)
    throws SQLException
  {
    Object value = outParameters().getValue(translate(parameterIndex));
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Object getObject(int parameterIndex, Map<String, Class<?>> map)
    throws SQLException
  {
    Object value = outParameters().getValue(translate(parameterIndex));
    this.resultWasNull = (value == null);
    return value;
  }
  
  public Array getArray(int parameterIndex)
    throws SQLException
  {
    Array value = (Array)outParameters().getValue(translate(parameterIndex), Array.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public URL getURL(int parameterIndex)
    throws SQLException
  {
    URL value = (URL)outParameters().getValue(translate(parameterIndex), URL.class);
    this.resultWasNull = (value == null);
    return value;
  }
  
  public boolean isClosed()
    throws SQLException
  {
    return this.isClosed;
  }
  
  public void close()
    throws SQLException
  {
    this.isClosed = true;
  }
  
  public void cancel()
    throws SQLException
  {
    this.isClosed = true;
  }
  
  public int getMaxFieldSize()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public void setMaxFieldSize(int max)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public int getMaxRows()
    throws SQLException
  {
    checkNotClosed();
    return this.maxRows;
  }
  
  public void setMaxRows(int max)
    throws SQLException
  {
    checkNotClosed();
    this.maxRows = max;
  }
  
  public void setEscapeProcessing(boolean enable)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public int getQueryTimeout()
    throws SQLException
  {
    checkNotClosed();
    return this.queryTimeout;
  }
  
  public void setQueryTimeout(int seconds)
    throws SQLException
  {
    checkNotClosed();
    this.queryTimeout = seconds;
  }
  
  public void setFetchDirection(int direction)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public int getFetchDirection()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public void setFetchSize(int rows)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public int getFetchSize()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public int getResultSetConcurrency()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public int getResultSetType()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public int getResultSetHoldability()
    throws SQLException
  {
    checkNotClosed();
    return 0;
  }
  
  public void setPoolable(boolean poolable)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public boolean isPoolable()
    throws SQLException
  {
    checkNotClosed();
    return false;
  }
  
  public SQLWarning getWarnings()
    throws SQLException
  {
    checkNotClosed();
    return null;
  }
  
  public void clearWarnings()
    throws SQLException
  {
    checkNotClosed();
  }
  
  public void setCursorName(String name)
    throws SQLException
  {
    checkNotClosed();
  }
  
  public ResultSetMetaData getMetaData()
    throws SQLException
  {
    checkNotClosed();
    throw new SQLException("Can this be ignored?");
  }
  
  public <T> T unwrap(Class<T> iface)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public boolean isWrapperFor(Class<?> iface)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public ParameterMetaData getParameterMetaData()
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(int parameterIndex, InputStream x, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(int parameterIndex, InputStream x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(String parameterName, InputStream x, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(String parameterName, InputStream x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setAsciiStream(String parameterName, InputStream x, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setUnicodeStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(int parameterIndex, InputStream x, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(int parameterIndex, InputStream x, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(int parameterIndex, InputStream x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(String parameterName, InputStream x, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(String parameterName, InputStream x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBinaryStream(String parameterName, InputStream x, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(int parameterIndex, Reader reader, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(int parameterIndex, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(String parameterName, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(String parameterName, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setCharacterStream(String parameterName, Reader reader, int length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNCharacterStream(int parameterIndex, Reader value, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNCharacterStream(int parameterIndex, Reader value)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNCharacterStream(String parameterName, Reader value)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNCharacterStream(String parameterName, Reader value, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setRef(int parameterIndex, Ref x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(int parameterIndex, Blob x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(int parameterIndex, InputStream inputStream, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(int parameterIndex, InputStream inputStream)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(String parameterName, Blob x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(String parameterName, InputStream inputStream)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBlob(String parameterName, InputStream inputStream, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(int parameterIndex, Clob x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(int parameterIndex, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(String parameterName, Clob x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(String parameterName, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setClob(String parameterName, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(int parameterIndex, NClob value)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(int parameterIndex, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(int parameterIndex, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(String parameterName, NClob value)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(String parameterName, Reader reader, long length)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNClob(String parameterName, Reader reader)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNString(String parameterName, String value)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setRowId(int parameterIndex, RowId x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setRowId(String parameterName, RowId x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setSQLXML(int parameterIndex, SQLXML xmlObject)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setSQLXML(String parameterName, SQLXML xmlObject)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setDate(int parameterIndex, Date x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setDate(String parameterName, Date x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setDate(String parameterName, Date x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTime(int parameterIndex, Time x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTime(String parameterName, Time x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTime(String parameterName, Time x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTimestamp(String parameterName, Timestamp x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setTimestamp(String parameterName, Timestamp x, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setURL(String parameterName, URL val)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNull(String parameterName, int sqlType)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setNull(String parameterName, int sqlType, String typeName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBoolean(String parameterName, boolean x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setByte(String parameterName, byte x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setShort(String parameterName, short x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setInt(String parameterName, int x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setLong(String parameterName, long x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setFloat(String parameterName, float x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setDouble(String parameterName, double x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBigDecimal(String parameterName, BigDecimal x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setString(String parameterName, String x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setBytes(String parameterName, byte[] x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setObject(String parameterName, Object x, int targetSqlType, int scale)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setObject(String parameterName, Object x, int targetSqlType)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void setObject(String parameterName, Object x)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void registerOutParameter(String parameterName, int sqlType)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void registerOutParameter(String parameterName, int sqlType, int scale)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public void registerOutParameter(String parameterName, int sqlType, String typeName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public String getString(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public boolean getBoolean(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public byte getByte(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public short getShort(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public int getInt(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public long getLong(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public float getFloat(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public double getDouble(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public byte[] getBytes(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Date getDate(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Time getTime(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Timestamp getTimestamp(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Object getObject(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public BigDecimal getBigDecimal(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Object getObject(String parameterName, Map<String, Class<?>> map)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Ref getRef(int parameterIndex)
    throws SQLException
  {
    return null;
  }
  
  public Ref getRef(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Blob getBlob(int parameterIndex)
    throws SQLException
  {
    return null;
  }
  
  public Blob getBlob(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Clob getClob(int parameterIndex)
    throws SQLException
  {
    return null;
  }
  
  public Clob getClob(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public NClob getNClob(int parameterIndex)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public NClob getNClob(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public String getNString(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Reader getNCharacterStream(int parameterIndex)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Reader getNCharacterStream(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Reader getCharacterStream(int parameterIndex)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Reader getCharacterStream(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Array getArray(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Date getDate(String parameterName, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Time getTime(String parameterName, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public Timestamp getTimestamp(String parameterName, Calendar cal)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public URL getURL(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public RowId getRowId(int parameterIndex)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public RowId getRowId(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public SQLXML getSQLXML(int parameterIndex)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
  
  public SQLXML getSQLXML(String parameterName)
    throws SQLException
  {
    throw new SQLFeatureNotSupportedException("Unsupported Operation");
  }
}
